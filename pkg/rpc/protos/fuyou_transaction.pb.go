// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fuyou_transaction.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SourceType int32

const (
	SourceType_UnknownService SourceType = 0
	SourceType_CardService    SourceType = 1
	SourceType_OrderService   SourceType = 2
	SourceType_PaymentService SourceType = 3
)

var SourceType_name = map[int32]string{
	0: "UnknownService",
	1: "CardService",
	2: "OrderService",
	3: "PaymentService",
}
var SourceType_value = map[string]int32{
	"UnknownService": 0,
	"CardService":    1,
	"OrderService":   2,
	"PaymentService": 3,
}

func (x SourceType) String() string {
	return proto.EnumName(SourceType_name, int32(x))
}
func (SourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type PaymentType int32

const (
	PaymentType_JSAPI  PaymentType = 0
	PaymentType_FWC    PaymentType = 1
	PaymentType_LETPAY PaymentType = 2
)

var PaymentType_name = map[int32]string{
	0: "JSAPI",
	1: "FWC",
	2: "LETPAY",
}
var PaymentType_value = map[string]int32{
	"JSAPI":  0,
	"FWC":    1,
	"LETPAY": 2,
}

func (x PaymentType) String() string {
	return proto.EnumName(PaymentType_name, int32(x))
}
func (PaymentType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type PayStatus int32

const (
	PayStatus_Paying            PayStatus = 0
	PayStatus_Succeed           PayStatus = 1
	PayStatus_Failed            PayStatus = 2
	PayStatus_Closed            PayStatus = 3
	PayStatus_PartiallyRefunded PayStatus = 8
	PayStatus_AllRefunded       PayStatus = 9
)

var PayStatus_name = map[int32]string{
	0: "Paying",
	1: "Succeed",
	2: "Failed",
	3: "Closed",
	8: "PartiallyRefunded",
	9: "AllRefunded",
}
var PayStatus_value = map[string]int32{
	"Paying":            0,
	"Succeed":           1,
	"Failed":            2,
	"Closed":            3,
	"PartiallyRefunded": 8,
	"AllRefunded":       9,
}

func (x PayStatus) String() string {
	return proto.EnumName(PayStatus_name, int32(x))
}
func (PayStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

// 预支付请求参数
type PrePayRequest struct {
	// 来源ID
	SourceId uint64 `protobuf:"varint,1,opt,name=sourceId" json:"sourceId,omitempty"`
	// 使用渠道类型
	SourceType SourceType `protobuf:"varint,2,opt,name=sourceType,enum=fuyou_payment_gateway.pkg.rpc.protos.SourceType" json:"sourceType,omitempty"`
	// 订单金额，单位：分
	OrderAmount uint64 `protobuf:"varint,3,opt,name=orderAmount" json:"orderAmount,omitempty"`
	// 商家 ID
	MerchantId uint64 `protobuf:"varint,4,opt,name=merchantId" json:"merchantId,omitempty"`
	// 富友商户号
	FuyouMerchantId string `protobuf:"bytes,5,opt,name=fuyouMerchantId" json:"fuyouMerchantId,omitempty"`
	// 订单描述
	Description string `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	// 支付类型 JSAPI-公众号支付、FWC--支付宝服务窗、LETPAY-小程序
	PayType PaymentType `protobuf:"varint,7,opt,name=payType,enum=fuyou_payment_gateway.pkg.rpc.protos.PaymentType" json:"payType,omitempty"`
	// 用户openId
	OpenId string `protobuf:"bytes,8,opt,name=openId" json:"openId,omitempty"`
	// 用户 IP
	UserIP string `protobuf:"bytes,9,opt,name=userIP" json:"userIP,omitempty"`
	// 小程序或公众号 appId
	AppId string `protobuf:"bytes,10,opt,name=appId" json:"appId,omitempty"`
}

func (m *PrePayRequest) Reset()                    { *m = PrePayRequest{} }
func (m *PrePayRequest) String() string            { return proto.CompactTextString(m) }
func (*PrePayRequest) ProtoMessage()               {}
func (*PrePayRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *PrePayRequest) GetSourceId() uint64 {
	if m != nil {
		return m.SourceId
	}
	return 0
}

func (m *PrePayRequest) GetSourceType() SourceType {
	if m != nil {
		return m.SourceType
	}
	return SourceType_UnknownService
}

func (m *PrePayRequest) GetOrderAmount() uint64 {
	if m != nil {
		return m.OrderAmount
	}
	return 0
}

func (m *PrePayRequest) GetMerchantId() uint64 {
	if m != nil {
		return m.MerchantId
	}
	return 0
}

func (m *PrePayRequest) GetFuyouMerchantId() string {
	if m != nil {
		return m.FuyouMerchantId
	}
	return ""
}

func (m *PrePayRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PrePayRequest) GetPayType() PaymentType {
	if m != nil {
		return m.PayType
	}
	return PaymentType_JSAPI
}

func (m *PrePayRequest) GetOpenId() string {
	if m != nil {
		return m.OpenId
	}
	return ""
}

func (m *PrePayRequest) GetUserIP() string {
	if m != nil {
		return m.UserIP
	}
	return ""
}

func (m *PrePayRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

// 预支付返回参数
type PrePayReply struct {
	// 支付事务流水号(渠道订单号)
	TransactionId uint64 `protobuf:"varint,1,opt,name=transactionId" json:"transactionId,omitempty"`
	// 支付信息
	MobilePaymentString string `protobuf:"bytes,2,opt,name=mobilePaymentString" json:"mobilePaymentString,omitempty"`
	// 错误信息
	Err *Error `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
}

func (m *PrePayReply) Reset()                    { *m = PrePayReply{} }
func (m *PrePayReply) String() string            { return proto.CompactTextString(m) }
func (*PrePayReply) ProtoMessage()               {}
func (*PrePayReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *PrePayReply) GetTransactionId() uint64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

func (m *PrePayReply) GetMobilePaymentString() string {
	if m != nil {
		return m.MobilePaymentString
	}
	return ""
}

func (m *PrePayReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

// 关闭支付事务请求参数
type CloseTransactionRequest struct {
	// 来源ID
	SourceId uint64 `protobuf:"varint,1,opt,name=sourceId" json:"sourceId,omitempty"`
	// 使用渠道类型
	SourceType SourceType `protobuf:"varint,2,opt,name=sourceType,enum=fuyou_payment_gateway.pkg.rpc.protos.SourceType" json:"sourceType,omitempty"`
}

func (m *CloseTransactionRequest) Reset()                    { *m = CloseTransactionRequest{} }
func (m *CloseTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseTransactionRequest) ProtoMessage()               {}
func (*CloseTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *CloseTransactionRequest) GetSourceId() uint64 {
	if m != nil {
		return m.SourceId
	}
	return 0
}

func (m *CloseTransactionRequest) GetSourceType() SourceType {
	if m != nil {
		return m.SourceType
	}
	return SourceType_UnknownService
}

// 关闭支付事务返回参数
type CloseTransactionReply struct {
	// 错误信息
	Err *Error `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *CloseTransactionReply) Reset()                    { *m = CloseTransactionReply{} }
func (m *CloseTransactionReply) String() string            { return proto.CompactTextString(m) }
func (*CloseTransactionReply) ProtoMessage()               {}
func (*CloseTransactionReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *CloseTransactionReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

// 支付状态查询请求参数（如果发现从支付中变更为已支付，则会触发支付成功的流程）
type QueryPayResultRequest struct {
	// 来源 ID
	SourceId uint64 `protobuf:"varint,1,opt,name=sourceId" json:"sourceId,omitempty"`
	// 来源 ID
	SourceType SourceType `protobuf:"varint,2,opt,name=sourceType,enum=fuyou_payment_gateway.pkg.rpc.protos.SourceType" json:"sourceType,omitempty"`
	// 商家 ID
	MerchantId string `protobuf:"bytes,3,opt,name=merchantId" json:"merchantId,omitempty"`
}

func (m *QueryPayResultRequest) Reset()                    { *m = QueryPayResultRequest{} }
func (m *QueryPayResultRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryPayResultRequest) ProtoMessage()               {}
func (*QueryPayResultRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *QueryPayResultRequest) GetSourceId() uint64 {
	if m != nil {
		return m.SourceId
	}
	return 0
}

func (m *QueryPayResultRequest) GetSourceType() SourceType {
	if m != nil {
		return m.SourceType
	}
	return SourceType_UnknownService
}

func (m *QueryPayResultRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

// 支付状态查询返回参数
type QueryPayResultReply struct {
	// 支付状态
	PayStatus PayStatus `protobuf:"varint,1,opt,name=payStatus,enum=fuyou_payment_gateway.pkg.rpc.protos.PayStatus" json:"payStatus,omitempty"`
	// 错误信息
	Err *Error `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *QueryPayResultReply) Reset()                    { *m = QueryPayResultReply{} }
func (m *QueryPayResultReply) String() string            { return proto.CompactTextString(m) }
func (*QueryPayResultReply) ProtoMessage()               {}
func (*QueryPayResultReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *QueryPayResultReply) GetPayStatus() PayStatus {
	if m != nil {
		return m.PayStatus
	}
	return PayStatus_Paying
}

func (m *QueryPayResultReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func init() {
	proto.RegisterType((*PrePayRequest)(nil), "fuyou_payment_gateway.pkg.rpc.protos.PrePayRequest")
	proto.RegisterType((*PrePayReply)(nil), "fuyou_payment_gateway.pkg.rpc.protos.PrePayReply")
	proto.RegisterType((*CloseTransactionRequest)(nil), "fuyou_payment_gateway.pkg.rpc.protos.CloseTransactionRequest")
	proto.RegisterType((*CloseTransactionReply)(nil), "fuyou_payment_gateway.pkg.rpc.protos.CloseTransactionReply")
	proto.RegisterType((*QueryPayResultRequest)(nil), "fuyou_payment_gateway.pkg.rpc.protos.QueryPayResultRequest")
	proto.RegisterType((*QueryPayResultReply)(nil), "fuyou_payment_gateway.pkg.rpc.protos.QueryPayResultReply")
	proto.RegisterEnum("fuyou_payment_gateway.pkg.rpc.protos.SourceType", SourceType_name, SourceType_value)
	proto.RegisterEnum("fuyou_payment_gateway.pkg.rpc.protos.PaymentType", PaymentType_name, PaymentType_value)
	proto.RegisterEnum("fuyou_payment_gateway.pkg.rpc.protos.PayStatus", PayStatus_name, PayStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PayController service

type PayControllerClient interface {
	PrePay(ctx context.Context, in *PrePayRequest, opts ...grpc.CallOption) (*PrePayReply, error)
	CloseTransaction(ctx context.Context, in *CloseTransactionRequest, opts ...grpc.CallOption) (*CloseTransactionReply, error)
	QueryPayResult(ctx context.Context, in *QueryPayResultRequest, opts ...grpc.CallOption) (*QueryPayResultReply, error)
}

type payControllerClient struct {
	cc *grpc.ClientConn
}

func NewPayControllerClient(cc *grpc.ClientConn) PayControllerClient {
	return &payControllerClient{cc}
}

func (c *payControllerClient) PrePay(ctx context.Context, in *PrePayRequest, opts ...grpc.CallOption) (*PrePayReply, error) {
	out := new(PrePayReply)
	err := grpc.Invoke(ctx, "/fuyou_payment_gateway.pkg.rpc.protos.PayController/PrePay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payControllerClient) CloseTransaction(ctx context.Context, in *CloseTransactionRequest, opts ...grpc.CallOption) (*CloseTransactionReply, error) {
	out := new(CloseTransactionReply)
	err := grpc.Invoke(ctx, "/fuyou_payment_gateway.pkg.rpc.protos.PayController/CloseTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payControllerClient) QueryPayResult(ctx context.Context, in *QueryPayResultRequest, opts ...grpc.CallOption) (*QueryPayResultReply, error) {
	out := new(QueryPayResultReply)
	err := grpc.Invoke(ctx, "/fuyou_payment_gateway.pkg.rpc.protos.PayController/QueryPayResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PayController service

type PayControllerServer interface {
	PrePay(context.Context, *PrePayRequest) (*PrePayReply, error)
	CloseTransaction(context.Context, *CloseTransactionRequest) (*CloseTransactionReply, error)
	QueryPayResult(context.Context, *QueryPayResultRequest) (*QueryPayResultReply, error)
}

func RegisterPayControllerServer(s *grpc.Server, srv PayControllerServer) {
	s.RegisterService(&_PayController_serviceDesc, srv)
}

func _PayController_PrePay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrePayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayControllerServer).PrePay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fuyou_payment_gateway.pkg.rpc.protos.PayController/PrePay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayControllerServer).PrePay(ctx, req.(*PrePayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayController_CloseTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayControllerServer).CloseTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fuyou_payment_gateway.pkg.rpc.protos.PayController/CloseTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayControllerServer).CloseTransaction(ctx, req.(*CloseTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayController_QueryPayResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPayResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayControllerServer).QueryPayResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fuyou_payment_gateway.pkg.rpc.protos.PayController/QueryPayResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayControllerServer).QueryPayResult(ctx, req.(*QueryPayResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PayController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fuyou_payment_gateway.pkg.rpc.protos.PayController",
	HandlerType: (*PayControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrePay",
			Handler:    _PayController_PrePay_Handler,
		},
		{
			MethodName: "CloseTransaction",
			Handler:    _PayController_CloseTransaction_Handler,
		},
		{
			MethodName: "QueryPayResult",
			Handler:    _PayController_QueryPayResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fuyou_transaction.proto",
}

func init() { proto.RegisterFile("fuyou_transaction.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 666 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0xe3, 0x36, 0x89, 0x6f, 0xbe, 0xa6, 0xfe, 0x6e, 0x29, 0xb5, 0xb2, 0x40, 0x91, 0xd5,
	0x45, 0x54, 0x44, 0x68, 0xd3, 0x15, 0x42, 0x5d, 0x84, 0xa8, 0x95, 0x02, 0x54, 0x18, 0xa7, 0x50,
	0xc1, 0xa6, 0x9a, 0xda, 0xd3, 0x60, 0xd5, 0xf1, 0x98, 0xf1, 0x98, 0xca, 0x4f, 0x80, 0xc4, 0x8a,
	0x27, 0x60, 0x53, 0x78, 0x4f, 0xe4, 0x71, 0x9c, 0xb8, 0xa5, 0x48, 0x26, 0x9b, 0xae, 0xec, 0x39,
	0xf7, 0x67, 0xce, 0xb9, 0x3f, 0x03, 0x5b, 0x17, 0x71, 0xc2, 0xe2, 0x33, 0xc1, 0x49, 0x10, 0x11,
	0x47, 0x78, 0x2c, 0xe8, 0x85, 0x9c, 0x09, 0x86, 0xdb, 0x99, 0x21, 0x24, 0xc9, 0x94, 0x06, 0xe2,
	0x6c, 0x42, 0x04, 0xbd, 0x22, 0x49, 0x2f, 0xbc, 0x9c, 0xf4, 0x78, 0xe8, 0x64, 0x4e, 0x51, 0xdb,
	0xbc, 0xd3, 0xeb, 0xcc, 0x61, 0xd3, 0x69, 0x9e, 0xc9, 0xfc, 0xa1, 0xc2, 0x9a, 0xc5, 0xa9, 0x45,
	0x12, 0x9b, 0x7e, 0x8e, 0x69, 0x24, 0xb0, 0x0d, 0x8d, 0x88, 0xc5, 0xdc, 0xa1, 0x23, 0xd7, 0x50,
	0x3a, 0x4a, 0x77, 0xc5, 0x9e, 0x9f, 0xd1, 0x02, 0xc8, 0xfe, 0x4f, 0x92, 0x90, 0x1a, 0xd5, 0x8e,
	0xd2, 0x6d, 0xf5, 0x77, 0x7b, 0x65, 0xc8, 0xf4, 0xc6, 0xf3, 0x38, 0xbb, 0x90, 0x03, 0x3b, 0xd0,
	0x64, 0xdc, 0xa5, 0x7c, 0x30, 0x65, 0x71, 0x20, 0x0c, 0x55, 0x5e, 0x58, 0x84, 0xf0, 0x11, 0xc0,
	0x94, 0x72, 0xe7, 0x13, 0x09, 0xc4, 0xc8, 0x35, 0x56, 0xa4, 0x43, 0x01, 0xc1, 0x2e, 0xac, 0x4b,
	0x02, 0xc7, 0x0b, 0xa7, 0xd5, 0x8e, 0xd2, 0xd5, 0xec, 0xdb, 0x70, 0x7a, 0x97, 0x4b, 0x23, 0x87,
	0x7b, 0x61, 0x5a, 0x4a, 0xa3, 0x26, 0xbd, 0x8a, 0x10, 0xbe, 0x82, 0x7a, 0x48, 0x12, 0x29, 0xae,
	0x2e, 0xc5, 0xed, 0x95, 0x13, 0x67, 0x65, 0x66, 0xa9, 0x2e, 0xcf, 0x80, 0x0f, 0xa1, 0xc6, 0x42,
	0x1a, 0x8c, 0x5c, 0xa3, 0x21, 0x6f, 0x9a, 0x9d, 0x52, 0x3c, 0x8e, 0x28, 0x1f, 0x59, 0x86, 0x96,
	0xe1, 0xd9, 0x09, 0x1f, 0xc0, 0x2a, 0x09, 0xc3, 0x91, 0x6b, 0x80, 0x84, 0xb3, 0x83, 0xf9, 0x53,
	0x81, 0x66, 0xde, 0xa0, 0xd0, 0x4f, 0x70, 0x1b, 0xd6, 0x0a, 0xf3, 0x30, 0xef, 0xd1, 0x4d, 0x10,
	0x77, 0x61, 0x63, 0xca, 0xce, 0x3d, 0x9f, 0xce, 0x98, 0x8d, 0x05, 0xf7, 0x82, 0x89, 0xec, 0x98,
	0x66, 0xdf, 0x65, 0xc2, 0x03, 0x50, 0x29, 0xe7, 0xb2, 0x01, 0xcd, 0xfe, 0xe3, 0x72, 0xb2, 0x0f,
	0x39, 0x67, 0xdc, 0x4e, 0xe3, 0xcc, 0xaf, 0x0a, 0x6c, 0x0d, 0x7d, 0x16, 0xd1, 0x93, 0x05, 0x8f,
	0x7b, 0x99, 0x28, 0xf3, 0x3d, 0x6c, 0xfe, 0x49, 0x24, 0xad, 0xdc, 0x4c, 0xa1, 0xb2, 0xa4, 0xc2,
	0x5f, 0x0a, 0x6c, 0xbe, 0x8d, 0x29, 0x4f, 0x64, 0x2b, 0xa2, 0xd8, 0x17, 0xf7, 0xb3, 0x31, 0x37,
	0xf7, 0x41, 0x95, 0x1d, 0x2d, 0x20, 0xe6, 0xb5, 0x02, 0x1b, 0xb7, 0x79, 0xa6, 0xf2, 0x8f, 0x41,
	0x0b, 0x49, 0x32, 0x16, 0x44, 0xc4, 0x91, 0xa4, 0xd9, 0xea, 0x3f, 0x2d, 0x3d, 0xdd, 0x59, 0x98,
	0xbd, 0xc8, 0x90, 0x57, 0xb3, 0xba, 0x5c, 0x35, 0x77, 0x4e, 0x01, 0x16, 0xfa, 0x10, 0xa1, 0xf5,
	0x2e, 0xb8, 0x0c, 0xd8, 0x55, 0x30, 0xa6, 0xfc, 0x8b, 0xe7, 0x50, 0xbd, 0x82, 0xeb, 0xd0, 0x1c,
	0x12, 0xee, 0xe6, 0x80, 0x82, 0x3a, 0xfc, 0xf7, 0x26, 0x7d, 0x17, 0x72, 0xa4, 0x9a, 0x86, 0xe5,
	0x43, 0x3c, 0xc3, 0xd4, 0x9d, 0x27, 0xd0, 0x2c, 0x6c, 0x23, 0x6a, 0xb0, 0xfa, 0x72, 0x3c, 0xb0,
	0x46, 0x7a, 0x05, 0xeb, 0xa0, 0x1e, 0x9d, 0x0e, 0x75, 0x05, 0x01, 0x6a, 0xaf, 0x0f, 0x4f, 0xac,
	0xc1, 0x07, 0xbd, 0xba, 0xe3, 0x82, 0x36, 0x97, 0x97, 0x1a, 0x2c, 0x92, 0x78, 0xc1, 0x44, 0xaf,
	0x60, 0x13, 0xea, 0xe3, 0xd8, 0x71, 0x28, 0x75, 0xb3, 0x88, 0x23, 0xe2, 0xf9, 0xd4, 0xd5, 0xab,
	0xe9, 0xbf, 0x9c, 0x2f, 0x57, 0x57, 0x71, 0x13, 0xfe, 0xb7, 0x08, 0x17, 0x1e, 0xf1, 0xfd, 0xc4,
	0xa6, 0x17, 0x71, 0xe0, 0x52, 0x57, 0x6f, 0xa4, 0xd4, 0x07, 0xbe, 0x3f, 0x07, 0xb4, 0xfe, 0x75,
	0xfa, 0xca, 0x92, 0x64, 0xc8, 0x02, 0xc1, 0x99, 0xef, 0x53, 0x8e, 0x1c, 0x6a, 0xd9, 0x56, 0xe3,
	0x7e, 0xc9, 0x26, 0x14, 0x1f, 0xe9, 0xf6, 0xde, 0xbf, 0x05, 0x85, 0x7e, 0x62, 0x56, 0xf0, 0xbb,
	0x02, 0xfa, 0xed, 0xd5, 0xc0, 0x83, 0x72, 0x99, 0xfe, 0xb2, 0xdb, 0xed, 0xe7, 0xcb, 0x86, 0x67,
	0x94, 0xbe, 0x29, 0xd0, 0xba, 0x39, 0xac, 0x58, 0x32, 0xe3, 0x9d, 0xab, 0xd8, 0x7e, 0xb6, 0x5c,
	0xb0, 0x24, 0xf3, 0xa2, 0xf1, 0xb1, 0x96, 0xd9, 0xcf, 0xb3, 0xef, 0xfe, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xf3, 0x2e, 0x35, 0x44, 0x81, 0x07, 0x00, 0x00,
}
